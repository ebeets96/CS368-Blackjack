#include "CardDeck.hpp"
#include "Card.hpp"
#include "IO.hpp"
#include "Player.hpp"

#include <iostream>
#include <vector>
#include <string>

void clearScreen(){

	// USED FOR CLEARING THE CONSOLE
	std::cout << "\033[2J\033[1;1H";
	printWelcome();

}

int convertRank(int rank){

	if (rank == 0){
		return 11;
	}
	
	else if (rank > 0 && rank < 9) {
		return ++rank;	
	}
	
	else if (rank >= 9){
		return 10;	
	}
}

void mainGameLoop(Player player){
	
	// INITIALIZES CARDS
	CardDeck deck;
	deck.shuffle();

	bool handIsOver = false;

	std::vector<Card> dealer;
	std::vector<Card> myCards;	
	std::vector<std::vector<std::string>> dealersCardGraphics;
	std::vector<std::vector<std::string>> myCardGraphics;

	std::string input;	
	int bet;	
	
	while (player.getBankroll() > 0){
		clearScreen();
		printFrameWithText("Place your bets. ($" + 
			std::to_string(player.getBankroll()) +  + " remaining)", 1);
	
		input = getUserInput("          => $");
		bet = verifyNumber(input);
	
		player.setBankroll(player.getBankroll() - bet);
	
		// DRAWS CARDS FROM THE DECK TO DEAL
		for (int i = 0; i < 2; i++){
			dealer.push_back(deck.getCard());
			myCards.push_back(deck.getCard());
		}
	
		int playerCount = 0;
		int dealerCount = 0;
		bool playerHasAce;
		bool dealerHasAce;

		while (!handIsOver){
			clearScreen();
			printFrameWithText("You bet: $" + std::to_string(bet) + " ($" + 
				std::to_string(player.getBankroll()) +  + " remaining)", 1);
	
			// PRINTS DEALERS CARDS
			printFrameWithTextLeft("Dealers hand:", 0);
		
			for (int i = 0; i < dealer.size(); i++){
				Card temp = dealer[i];
				dealersCardGraphics.push_back(createCardGraphic(temp, !(i%2 == 0)));
			}
			
			printCards(dealersCardGraphics);

			// PRINTS PLAYERS CARDS
			printFrameWithTextLeft("Your hand:", 1);

			for (int i = 0; i < myCards.size(); i++){
				Card temp = myCards[i];
				myCardGraphics.push_back(createCardGraphic(temp, true));
			
				int tempRank = convertRank(temp.getRank());
				playerCount += tempRank;
			}

			printCards(myCardGraphics);
		
			if (playerCount < 22){
				printFrameWithText("Would you like to Hit (H), Double (D), or Stay (S)?", 1);
				std::string choice = getUserInput();
		
				// CLEARS VECTORS TO PREP FOR HIt		
				if (choice == "H" || choice == "h"){
					myCards.push_back(deck.getCard());
				}
			}
		
			else {
				printBusted();
				handIsOver = true;
				printFrameWithText("To play another hand press <ENTER>.", 1);
				getUserInput();
			}
			myCardGraphics.clear();
			dealersCardGraphics.clear();
			playerCount = 0;
		}
		
		myCards.clear();
		dealer.clear();
	}
}

void startNewGame(){
	
	// Player variables
	std::string input;
	std::string name;
	int bankroll = 0;

	clearScreen();
	
	printFrameWithText("Please enter your name.", 1);
	name = getUserInput();

	clearScreen();

	printFrameWithText("Please deposit money into your bankroll.", 1);
	input = getUserInput("          => $");
	bankroll = verifyNumber(input);

	Player player(name, bankroll);
	
	mainGameLoop(player);
}

int main(){
	
	// USED FOR CLEARING THE CONSOLE
	std::cout << "\033[2J\033[1;1H";	
	
	std::string input;
	int menuChoice;
	
	// PRINTS THE WELCOME MESSAGE / MENU
	startGame();

	// GETS MAIN MENU OPTION FROM USER
	input = getUserInput();
	menuChoice = verifyNumber(input);

	switch (menuChoice){
		// NEW GAME			
		case 1: 
			startNewGame();
			break;

		// LOAD GAME
		case 2:
			break;

		// STATS
		case 3:
			break;

		// HELP
		case 4:
			break;

		// QUIT
		case 5:
			break;
	}








































/*
	std::vector<std::vector<std::string>> dealer;

	for (int i = 0; i < 6; i++){
		Card tempDraw = deck.getCard();
		dealer.push_back(createCardGraphic(tempDraw, false));
	}

	printCards(dealer);



	std::cout << std::endl; 
	
	input = getUserInput();
	verifyNumber(input);

	printMargin();
	printFrameWithText("What is your name?");
	printFrame(1);
	getUserInput();
	std::cout << "\033[2J\033[1;1H";

	
	mainGameLoop();
*/
}

